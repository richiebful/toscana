<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:rng="http://relaxng.org/ns/structure/1.0"
  version="2.9.1"
  xml:lang="en">
  <teiHeader>
    <!--2018-01-28 ebb: I left some comments below (headed with this date and my initials) further on about how to embed Schematron in TEI ODD. Hope this helps! This ODD should work for generating Schematron rules. You'll need to update the association lines in your XML files to be validated to make sure they're reading Schematron rules, too. -->
    <fileDesc>
      <titleStmt>
        <title>Lega Toscana di Protezione ODD File</title>
        <author>Zachary Enick</author>
      </titleStmt>
      <publicationStmt>
        <authority>Prepared in TEI 5 by Zachary Enick for the Italian research assistantship at the
          University of Pittsburgh. Github repository <ref target="http://github.com/zme1/toscana"
          />. Date last worked on: <date when="2018-01-27"/></authority>
        <availability>
          <licence><!-- licence to go here --></licence>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Born digital.</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <schemaSpec ident="oddex1" source="tei:current" start="teiCorpus">
        <moduleRef key="header"/>
        <moduleRef key="core"
          include="add address addrLine author bibl date del item lb list num p pb resp respStmt rs teiCorpus title unclear"/>
        <moduleRef key="tei"/>
        <moduleRef key="textstructure" include="TEI body closer signed text"/>
        <moduleRef key="corpus" except="activity locale particDesc"/>
        <moduleRef key="linking" include="ab seg"/>
        <moduleRef key="msdescription"
          include="accMat acquisition handDesc history institution msDesc msIdentifier msName origin physDesc repository"/>
        <moduleRef key="namesdates" include="orgName persName roleName surname"/>
      </schemaSpec>
      <elementSpec ident="seg" mode="change" module="linking">
        <attList>
          <attDef ident="type" mode="replace" usage="req">
            <valList type="closed">
              <valItem ident="proposal"/>
              <valItem ident="invite"/>
              <valItem ident="delegation"/>
              <valItem ident="comp"/>
              <valItem ident="nomination"/>
            </valList>
          </attDef>
          <attDef ident="subtype" mode="replace" usage="opt">
            <valList type="closed">
              <valItem ident="task"/>
              <valItem ident="committee"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="persName" mode="change" module="namesdates">
        <constraintSpec ident="persName_surname" scheme="isoschematron">
          <constraint>
            <!--2018-01-28 ebb: You don't want this sch:rule element when you're working on Schematron in an elementSpec <sch:rule xmlns:sch="http://purl.oclc.org/dsdl/schematron" context=".">. The reason is because you don't need or want to define a context for a schematron rule when it is defined inside an <elementSpec>. In TEI ODD, when you set an <elementSpec>, it controls the context of everything within its content. So here, you set things up like so::
               <constraintSpec>
                        <constraint>
                            <sch:assert test="whatever-is-supposed-to-go-on-inside-persName">Message to your team</sch:assert>
                            <sch:report test="stuff-you-don't-want-to-happen-inside-persName">Message to your team</sch:report>
                      </constraint>
                </constraintSpec>
            
            -->
              <sch:assert test="tei:surname">Every persName element must have a child
                surname element</sch:assert>
            <!--</sch:rule>-->
          </constraint>
        </constraintSpec>
        <!-- I can't figure out how to write correct schematron rules... -->
        <attList>
          <attDef ident="ref" mode="replace" usage="req">
            <valList type="closed">
              <valItem ident="#enickz"/>
              <valItem ident="#insanal"/>
              <valItem ident="#jermyne"/>
              <valItem ident="#keilr"/>
              <valItem ident="#millarj"/>
              <valItem ident="#bondare"/>
              <valItem ident="#vondasl"/>
              <valItem ident="#ms"/>
              <valItem ident="#ap"/>
              <valItem ident="#mf"/>
              <valItem ident="#sm"/>
              <valItem ident="#ml"/>
              <valItem ident="#lb"/>
              <valItem ident="#mp"/>
              <valItem ident="#ed"/>
              <valItem ident="#al"/>
              <valItem ident="#cs"/>
              <valItem ident="#ep"/>
              <valItem ident="#am"/>
              <valItem ident="#cr"/>
              <valItem ident="#ll"/>
              <valItem ident="#pb"/>
              <valItem ident="#gr"/>
              <valItem ident="#em"/>
              <valItem ident="#cg"/>
              <valItem ident="#ld"/>
              <valItem ident="#sd"/>
              <valItem ident="#gf"/>
              <valItem ident="#sp"/>
              <valItem ident="unknown"/>
              <!-- I am yet to figure out one @ref value for a brother with a shared last name -->
              <valItem ident="#cp"/>
              <valItem ident="#af"/>
              <valItem ident="#cp"/>
              <valItem ident="#lv"/>
              <valItem ident="#mz"/>
              <valItem ident="#lv"/>
              <valItem ident="#vd"/>
              <valItem ident="#es"/>
              <valItem ident="#rr"/>
              <valItem ident="#rm"/>
              <valItem ident="#lt"/>
              <valItem ident="#op"/>
              <valItem ident="#fb"/>
              <valItem ident="#ss"/>
              <valItem ident="#eb"/>
              <valItem ident="#cc"/>
              <valItem ident="#gt"/>
              <valItem ident="#os"/>
              <valItem ident="#up"/>
              <valItem ident="#fg"/>
              <valItem ident="#vb"/>
              <valItem ident="#js"/>
              <valItem ident="#gs"/>
              <valItem ident="#gm"/>
            </valList>
          </attDef>
          <attDef ident="role" mode="replace" usage="rec">
            <valList type="closed">
              <valItem ident="source"/>
              <valItem ident="target"/>
              <valItem ident="proposer"/>
              <valItem ident="supporter"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="num" mode="change" module="core">
        <attList>
          <attDef ident="type" mode="replace" usage="req">
            <valList type="closed">
              <valItem ident="monetary"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="rs" mode="change" module="core">
        <attList>
          <attDef ident="role" mode="replace" usage="rec">
            <valList type="closed">
              <valItem ident="source"/>
              <valItem ident="target"/>
              <valItem ident="proposer"/>
              <valItem ident="supporter"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="ab" mode="change" module="linking">
        <content>
          <alternate maxOccurs="unbounded" minOccurs="0">
            <textNode/>
            <elementRef key="closer"/>
            <elementRef key="persName"/>
            <elementRef key="lb"/>
            <elementRef key="pb"/>
            <elementRef key="seg"/>
            <elementRef key="del"/>
            <elementRef key="rs"/>
            <elementRef key="add"/>
            <elementRef key="orgName"/>
            <elementRef key="roleName"/>
            <elementRef key="unclear"/>
            <elementRef key="list"/>
          </alternate>
        </content>
      </elementSpec>
      <elementSpec ident="roleName" mode="change" module="namesdates">
        <attList>
          <attDef ident="type" mode="replace" usage="req">
            <valList type="closed">
              <valItem ident="committee"/>
              <valItem ident="subcommittee"/>
              <valItem ident="officer"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="list" mode="change" module="core">
        <content>
          <alternate maxOccurs="unbounded" minOccurs="0">
            <textNode/>
            <elementRef key="item"/>
            <elementRef key="lb"/>
            <elementRef key="pb"/>
          </alternate>
        </content>
        <attList>
          <attDef ident="type" mode="replace" usage="rec">
            <valList type="closed">
              <valItem ident="committee"/>
              <valItem ident="officers"/>
              <valItem ident="absent"/>
              <valItem ident="applicants"/>
            </valList>
          </attDef>
          <attDef ident="subtype" mode="replace" usage="rec">
            <valList type="closed">
              <valItem ident="festaCampestre"/>
              <valItem ident="ballo"/>
              <valItem ident="fondoM"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="orgName" mode="change" module="namesdates">
        <attList>
          <attDef ident="ref" mode="replace" usage="req">
            <valList type="closed">
              <valItem ident="#pittText"/>
              <valItem ident="#praxis"/>
              <valItem ident="#hhc"/>
              <valItem ident="#legaT"/>
              <valItem ident="#figli"/>
              <valItem ident="#msgm"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
     <!--2018-01-28 ebb: Here's an alternative way to define the SAME rule we wrote in the elementSpec for persName above. If you write a constraintSpec as a sibling of the elementSpec elements you need to define its context with sch:rule this time: See how this works?
       
       <constraintSpec ident="persName_surname" scheme="isoschematron">
        <constraint>
          <sch:rule xmlns:sch="http://purl.oclc.org/dsdl/schematron" context="tei:persName">
          <sch:assert test="tei:surname">Every persName element must have a child
            surname element</sch:assert>
          </sch:rule>
        </constraint>
      </constraintSpec>-->
      <!-- I need schematron rules to ensure that every persName element has a child surname element, and that every seg element with the
       @type proposal has at least one child persName element with a @role attribute.-->

      <!-- Have not determined proper Schematron documentation as of yet. -->

    </body>
  </text>
</TEI>
